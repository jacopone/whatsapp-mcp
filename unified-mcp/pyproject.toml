[project]
name = "whatsapp-unified-mcp"
version = "1.0.0"
description = "Unified WhatsApp MCP Server combining Go and Baileys bridges"
requires-python = ">=3.12"
dependencies = [
    "fastmcp>=0.2.0",
    "requests>=2.31.0",
    "typing-extensions>=4.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=6.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-docker>=3.1.0",
    "pytest-rerunfailures>=12.0",
    "responses>=0.25.0",
    "psutil>=5.9.0",
    "black>=24.0.0",
    "ruff>=0.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.black]
line-length = 100
target-version = ["py312"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-v --strict-markers --timeout=10 --reruns 3 --reruns-delay 1 --doctest-modules"

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "**/__pycache__/**",
    "**/htmlcov/**",
    "*/conftest.py",
    "*/__init__.py",
]
concurrency = ["thread"]

[tool.coverage.report]
precision = 2
show_missing = true
fail_under = 30  # Realistic threshold: 83% for health.py, but baileys/go clients are integration-tested
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# =============================================================================
# Mypy Configuration (Static Type Checking)
# =============================================================================
# Enforces: FR-012, FR-013, FR-014, FR-015
# Success Criteria: SC-007, SC-008, SC-009

[tool.mypy]
python_version = "3.12"
strict = true

# Strict mode flags (explicitly listed for clarity)
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = false  # Too many false positives with type: ignore
warn_unreachable = true
strict_equality = true
disallow_untyped_decorators = false  # MCP decorators are untyped

# Allow selective ignores for third-party libraries
[[tool.mypy.overrides]]
module = "fastmcp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mcp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests.*"
ignore_missing_imports = true
no_implicit_reexport = false

# =============================================================================
# Ruff Configuration (Linting and Formatting)
# =============================================================================
# Enforces: FR-016 to FR-025
# Success Criteria: SC-010, SC-011, SC-012, SC-013, SC-014, SC-015

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["."]

[tool.ruff.lint]
# Rule selection matches research.md decisions
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort (import sorting)
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade (modern Python syntax)
    "C90", # mccabe complexity (FR-020)
    "D",   # pydocstyle (docstring rules, FR-021 to FR-025)
    "RUF", # ruff-specific rules
]

# Ignore conflicting rules (see research.md) and pre-existing issues
ignore = [
    "D203", # one-blank-line-before-class (conflicts with D211)
    "D213", # multi-line-summary-second-line (conflicts with D212)
    "E501", # line-too-long (32 pre-existing violations, not blocking)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["N999"]  # Allow module names with hyphens in __init__.py

[tool.ruff.lint.mccabe]
# Enforces: FR-020 (Complexity limit of 10)
# Success Criteria: SC-012
max-complexity = 10

[tool.ruff.lint.pydocstyle]
# Enforces: FR-021 to FR-025 (Google-style docstrings)
# Success Criteria: SC-013, SC-014, SC-015
convention = "google"

[tool.ruff.lint.isort]
# Package-aware import sorting (FR-003)
known-first-party = ["unified_mcp"]
